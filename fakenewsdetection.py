# -*- coding: utf-8 -*-
"""Copy of FakeNewsDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-6g96OWWxRJGS3eCH72dvbE-0moaDH3n
"""

from sklearn import model_selection, preprocessing, svm, metrics
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn import ensemble
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
import numpy
import string
from keras.preprocessing import text, sequence
from sklearn.linear_model import LogisticRegression
from joblib import dump

dataframe = pd.read_csv("news.csv")
dataframe.head()

x = dataframe['News']
y = dataframe['Outcome']

train_x, valid_x, train_y, valid_y = model_selection.train_test_split(
    dataframe['News'], dataframe['Outcome'])

encoder = preprocessing.LabelEncoder()
train_y = encoder.fit_transform(train_y)
valid_y = encoder.fit_transform(valid_y)

tfidf_vect = TfidfVectorizer(
    analyzer='word', token_pattern=r'\w{1,}', max_features=5000)
tfidf_vect.fit(dataframe['News'])
xtrain_tfidf = tfidf_vect.transform(train_x)
xvalid_tfidf = tfidf_vect.transform(valid_x)

dump(tfidf_vect, 'tfidf.pkl')


def train_model(classifier, feature_vector_train, label, feature_vector_valid, is_neural_net=False):
    # fit the training dataset on the classifier
    classifier.fit(feature_vector_train, label)

    # predict the labels on validation dataset
    predictions = classifier.predict(feature_vector_valid)
    import pickle
    pickle.dump(classifier, open('model.pkl', 'wb'))

    if is_neural_net:
        predictions = predictions.argmax(axis=-1)

    return metrics.accuracy_score(predictions, valid_y)


"""SVM"""

accuracy = train_model(svm.SVC(), xtrain_tfidf, train_y, xvalid_tfidf)
print("SVM: ", accuracy)

"""ENSEMBLE"""

accuracy = train_model(DecisionTreeClassifier(),
                       xtrain_tfidf, train_y, xvalid_tfidf)
print("ENSEMBLE ", accuracy)

"""LOGISTIC REGRESSION

logmodel = LogisticRegression()
"""

accuracy = train_model(LogisticRegression(),
                       xtrain_tfidf, train_y, xvalid_tfidf)
print("Logistic Regression", accuracy)
